var searchIndex = JSON.parse('{\
"agora":{"doc":"A library for managing signal processing networks.","t":[6,13,17,4,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Buffer","CyclicalReference","EXTERNAL_INPUT","Error","Graph","Node","NodeReference","add_node","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","connect","default","disconnect","eq","eq","fmt","from","from","from","into","into","into","ne","process","process","remove_node","replace_node","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["agora","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A buffer of signal samples.","Returned when a connection is attempted that would create …","Use this value in the Graph::connect method to indicate …","Describes the type of error encountered when making a …","Orchestrate a group of processing nodes and use that …","Performs an isolated processing step in a signal graph.","Provides a reference to a Node added to a Graph.","Inserts a node into the signal graph, returning its ID.","","","","","","","","","Create a connection between a source node and a sink node.","","Remove a connection between nodes.","","","","","","","","","","","Generate or process serial data.","Process the given buffer of input signal.","Removes a node from the signal graph.","Replace an existing node in the graph, without modifying …","","","","","","","","","",""],"i":[0,1,0,0,0,0,0,2,3,2,1,3,2,1,3,3,2,2,2,3,1,1,3,2,1,3,2,1,3,4,2,2,2,3,3,2,1,3,2,1,3,2,1],"f":[null,null,null,null,null,null,null,[[["box",3,["node"]],["node",8]],["nodereference",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["nodereference",3]],[[]],[[["nodereference",3]],[["result",4,["error"]],["error",4]]],[[],["graph",3]],[[["nodereference",3]],["bool",15]],[[["nodereference",3]],["bool",15]],[[["error",4]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nodereference",3]],["bool",15]],[[["buffer",6]]],[[["buffer",6]]],[[["nodereference",3]],["bool",15]],[[["nodereference",3],["box",3,["node"]],["node",8]],[["box",3,["node"]],["option",4,["box"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"Error"],[3,"Graph"],[3,"NodeReference"],[8,"Node"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};